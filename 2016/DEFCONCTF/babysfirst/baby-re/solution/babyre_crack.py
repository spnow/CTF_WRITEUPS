#
# DEF CON CTF Quals 2016
# baby-re (baby's first/1)
#
# @a: Smoke Leet Everyday
# @u: https://github.com/smokeleeteveryday
#

from z3 import *

def solve_check():
	l = []
	for i in xrange(0, 13):
		# Add unknown 
		l.append(BitVec(i, 32))

	s = Solver()
	for i in xrange(0, 13):
		# add ASCII-printability constraints
		s.add(l[i] >= 0x20, l[i] <= 0x7E)

	# Add check constraints
	s.add(39342 * l[11] + 21090 * l[10] + 14626 * l[9] + 57693 * l[8] + 16388 * l[7] + 29554 * l[6] + 43166 * l[5] + 50633 * l[4] + 37485 * l[0] - 21621 * l[1] - 1874 * l[2] - 46273 * l[3] + 54757 * l[12] == 21399379)
	s.add(22599 * l[5] + 14794 * l[4] + 38962 * l[3] + 50936 * l[0] + 4809 * l[1] - 6019 * l[2] - 837 * l[6] - 36727 * l[7] - 50592 * l[8] - 11829 * l[9] - 20046 * l[10] - 9256 * l[11] + 53228 * l[12] == 1453872)
	s.add(5371 * l[11] + 42654 * l[10] + 17702 * l[8] + 26907 * l[3] + -38730 * l[0] + 52943 * l[1] - 16882 * l[2] - 44446 * l[4] - 18601 * l[5] - 65221 * l[6] - 47543 * l[7] - 33910 * l[9] + 11469 * l[12] == -5074020)
	s.add(8621 * l[10] + 34805 * l[7] + 10649 * l[6] + 54317 * l[4] + 57747 * l[0] - 23889 * l[1] - 26016 * l[2] - 25170 * l[3] - 32337 * l[5] - 9171 * l[8] - 22855 * l[9] - 634 * l[11] - 11864 * l[12] == -5467933)
	s.add(15578 * l[11] + 43186 * l[9] + 28134 * l[8] + 54889 * l[4] + 34670 * l[3] + 43964 * l[2] + -14005 * l[0] + 16323 * l[1] - 6141 * l[5] - 35427 * l[6] - 61977 * l[7] - 59676 * l[10] + 50082 * l[12] == 7787144)
	s.add(10305 * l[11] + 29341 * l[10] + 13602 * l[7] + 39603 * l[6] + 13608 * l[2] + -40760 * l[0] - 22014 * l[1] - 4946 * l[3] - 26750 * l[4] - 31708 * l[5] - 59055 * l[8] - 32738 * l[9] - 15650 * l[12] == -8863847)
	s.add(16047 * l[9] + 55241 * l[7] + 13477 * l[2] + -47499 * l[0] + 57856 * l[1] - 10219 * l[3] - 5032 * l[4] - 21039 * l[5] - 29607 * l[6] - 6065 * l[8] - 4554 * l[10] - 2262 * l[11] + 18903 * l[12] == -747805)
	s.add(41178 * l[11] + 47909 * l[7] + 53309 * l[6] + -65419 * l[0] + 17175 * l[1] - 9410 * l[2] - 22514 * l[3] - 52377 * l[4] - 9235 * l[5] - 59111 * l[8] - 41289 * l[9] - 24422 * l[10] - 23447 * l[12] == -11379056)
	s.add(15699 * l[10] + 58551 * l[5] + 46767 * l[4] + 33381 * l[3] + 1805 * l[0] + 4135 * l[1] - 16900 * l[2] - 34118 * l[6] - 44920 * l[7] - 11933 * l[8] - 20530 * l[9] - 36597 * l[11] + 18231 * l[12] == -166140)
	s.add(10788 * l[10] + 18975 * l[9] + 15033 * l[8] + 42363 * l[7] + 47052 * l[6] + 41284 * l[3] + -42941 * l[0] + 61056 * l[1] - 45169 * l[2] - 1722 * l[4] - 26423 * l[5] - 33319 * l[11] + 63680 * l[12] == 9010363)
	s.add(30753 * l[10] + 22613 * l[9] + 58786 * l[7] + 12587 * l[6] + 12746 * l[5] + -37085 * l[0] - 51590 * l[1] - 17798 * l[2] - 10127 * l[3] - 52388 * l[4] - 8269 * l[8] - 20853 * l[11] + 32216 * l[12] == -4169825)
	s.add(57612 * l[11] + 47348 * l[9] + 48719 * l[8] + 9228 * l[5] + 65196 * l[4] + 36650 * l[0] + 47566 * l[1] - 33282 * l[2] - 59180 * l[3] - 59599 * l[6] - 62888 * l[7] - 37592 * l[10] + 40510 * l[12] == 4081505)
	s.add(25633 * l[11] + 25252 * l[9] + 28153 * l[8] + 26517 * l[7] + 59511 * l[4] + 4102 * l[3] + 51735 * l[0] + 35879 * l[1] - 63890 * l[2] - 21386 * l[5] - 20769 * l[6] - 43789 * l[10] + 7314 * l[12] == 1788229)

	# Check if problem is satisfiable before trying to solve it
	if(s.check() == sat):
		print "[+] Problem is SAT :) solving..."
		# Now solve it
		sol_model = s.model()
		
		# Convert solution to string
		sol = ""
		for i in xrange(0, 13):
			sol += chr(sol_model[l[i]].as_long())
		return sol
	else:
		return False

print "[*] Setting up SAT constraints..."
flag = solve_check()
if (flag):
	print "[+] Got flag: [%s]" % flag